package starling.textures{   import flash.display3D.Context3D;   import flash.display3D.textures.TextureBase;   import flash.geom.Matrix;   import flash.geom.Rectangle;   import starling.core.RenderSupport;   import starling.core.Starling;   import starling.display.DisplayObject;   import starling.display.Image;   import starling.errors.MissingContextError;   import starling.filters.FragmentFilter;   import starling.utils.SystemUtil;   import starling.utils.execute;   import starling.utils.getNextPowerOfTwo;      public class RenderTexture extends SubTexture   {            private static var sClipRect:Rectangle = new Rectangle();            public static var optimizePersistentBuffers:Boolean = false;                   private const CONTEXT_POT_SUPPORT_KEY:String = "RenderTexture.supportsNonPotDimensions";            private const PMA:Boolean = true;            private var mActiveTexture:Texture;            private var mBufferTexture:Texture;            private var mHelperImage:Image;            private var mDrawing:Boolean;            private var mBufferReady:Boolean;            private var mIsPersistent:Boolean;            private var mSupport:RenderSupport;            public function RenderTexture(width:int, height:int, persistent:Boolean = true, scale:Number = -1, format:String = "bgra", repeat:Boolean = false) { super(null,null,null,null,null); }
            override public function dispose() : void { }
            public function draw(object:DisplayObject, matrix:Matrix = null, alpha:Number = 1.0, antiAliasing:int = 0) : void { }
            public function drawBundled(drawingBlock:Function, antiAliasing:int = 0) : void { }
            private function render(object:DisplayObject, matrix:Matrix = null, alpha:Number = 1.0) : void { }
            private function renderBundled(renderBlock:Function, object:DisplayObject = null, matrix:Matrix = null, alpha:Number = 1.0, antiAliasing:int = 0) : void { }
            public function clear(rgb:uint = 0, alpha:Number = 0.0) : void { }
            private function get supportsNonPotDimensions() : Boolean { return false; }
            private function get isDoubleBuffered() : Boolean { return false; }
            public function get isPersistent() : Boolean { return false; }
            override public function get base() : TextureBase { return null; }
            override public function get root() : ConcreteTexture { return null; }
   }}