package invite{   import baglocked.BaglockedManager;   import com.pickgliss.events.FrameEvent;   import com.pickgliss.events.ListItemEvent;   import com.pickgliss.events.UIModuleEvent;   import com.pickgliss.geom.IntPoint;   import com.pickgliss.loader.UIModuleLoader;   import com.pickgliss.ui.AlertManager;   import com.pickgliss.ui.ComponentFactory;   import com.pickgliss.ui.controls.Frame;   import com.pickgliss.ui.controls.ListPanel;   import com.pickgliss.ui.controls.SelectedButtonGroup;   import com.pickgliss.ui.controls.SelectedTextButton;   import com.pickgliss.ui.controls.TextButton;   import com.pickgliss.ui.controls.alert.BaseAlerFrame;   import com.pickgliss.ui.controls.container.HBox;   import com.pickgliss.ui.image.MutipleImage;   import com.pickgliss.utils.ObjectUtils;   import consortion.ConsortionModelManager;   import ddt.data.player.BasePlayer;   import ddt.data.player.FriendListPlayer;   import ddt.data.player.PlayerInfo;   import ddt.data.player.PlayerState;   import ddt.events.PkgEvent;   import ddt.manager.ChatManager;   import ddt.manager.GameInSocketOut;   import ddt.manager.IMManager;   import ddt.manager.LanguageMgr;   import ddt.manager.MessageTipManager;   import ddt.manager.PlayerManager;   import ddt.manager.SocketManager;   import ddt.manager.SoundManager;   import ddt.utils.PositionUtils;   import ddt.view.chat.ChatEvent;   import flash.events.Event;   import flash.events.MouseEvent;   import invite.data.InvitePlayerInfo;   import road7th.comm.PackageIn;   import road7th.data.DictionaryData;   import room.RoomManager;   import team.TeamManager;      public class InviteFrame extends Frame   {            public static const RECENT:int = 0;            public static const Brotherhood:int = 1;            public static const Friend:int = 2;            public static const Hall:int = 3;            public static const TEAM:int = 4;                   private var _visible:Boolean = true;            private var _resState:String;            private var _listBack:MutipleImage;            private var _refreshButton:TextButton;            private var _fastInviteBtn:TextButton;            private var _hbox:HBox;            private var _btnGroup:SelectedButtonGroup;            private var _hallButton:SelectedTextButton;            private var _frientButton:SelectedTextButton;            private var _brotherhoodButton:SelectedTextButton;            private var _recentContactBtn:SelectedTextButton;            private var _teamButton:SelectedTextButton;            private var _list:ListPanel;            private var _changeComplete:Boolean = false;            private var _refleshCount:int = 0;            private var _invitePlayerInfos:Array;            public var roomType:int;            private var _titleSelectStatus:Object;            private var _oldSelected:int;            public function InviteFrame() { super(); }
            private function configUi() : void { }
            private function addEvent() : void { }
            private function __freeInvitedHandler(e:ChatEvent) : void { }
            protected function __onFastInviteClick(event:MouseEvent) : void { }
            private function __confirmFastInvite(evt:FrameEvent) : void { }
            private function __btnChangeHandler(event:Event) : void { }
            private function __response(evt:FrameEvent) : void { }
            private function removeEvent() : void { }
            private function __onRefreshClick(evt:MouseEvent) : void { }
            private function __onGetList(evt:PkgEvent) : void { }
            override protected function __onCloseClick(event:MouseEvent) : void { }
            private function __itemClick(event:ListItemEvent) : void { }
            private function sort(arr:Array) : Array { return null; }
            private function updateList(type:int, list:Array) : void { }
            private function clearList() : void { }
            private function getInsertIndex(info:BasePlayer) : int { return 0; }
            private function __onResError(evt:UIModuleEvent) : void { }
            private function __onResComplete(evt:UIModuleEvent) : void { }
            private function refleshList(type:int, count:int = 0) : void { }
            private function get rerecentContactList() : Array { return null; }
            override public function dispose() : void { }
   }}