package ddt.manager{   import bagAndInfo.cell.DragEffect;   import com.pickgliss.ui.LayerManager;   import com.pickgliss.utils.ObjectUtils;   import ddt.interfaces.IAcceptDrag;   import ddt.interfaces.IDragable;   import flash.display.DisplayObject;   import flash.display.Sprite;   import flash.display.Stage;   import flash.events.Event;   import flash.events.EventDispatcher;   import flash.events.MouseEvent;   import flash.geom.Point;      public class DragManager extends EventDispatcher   {            public static const DRAG_IN_RANGE_TOP:String = "dragInRangeTop";            public static const DRAG_IN_RANGE_BUTTOM:String = "dragOutRangeButtom";            public static const DRAG_IN_HOT:String = "dragInHot";            private static var _isDraging:Boolean;            private static var _proxy:Sprite;            private static var _dragEffect:DragEffect;            private static var _source:IDragable;            private static var _throughAll:Boolean;            private static var _wheelFun:Function;            private static var _passSelf:Boolean;            private static var _isUpDrag:Boolean;            private static var _changCardStateFun:Function;            private static var _responseRectangle:DisplayObject;            private static var _responseRange:int;            private static var _isContinue:Boolean;                   public function DragManager() { super(); }
            public static function get proxy() : Sprite { return null; }
            public static function get isDraging() : Boolean { return false; }
            public static function startDrag(source:IDragable, data:Object, image:DisplayObject, stageX:int, stageY:int, action:String = "none", mouseMask:Boolean = true, mouseDown:Boolean = false, throughAll:Boolean = false, passSelf:Boolean = false, isUpDrag:Boolean = false, responseRetangle:DisplayObject = null, responseRange:int = 0, isContinue:Boolean = false) : Boolean { return false; }
            protected static function __checkResponse(event:Event) : void { }
            public static function ListenWheelEvent(Fun:Function) : void { }
            public static function removeListenWheelEvent() : void { }
            private static function __dispatchWheel(event:MouseEvent) : void { }
            public static function changeCardState(Fun:Function) : void { }
            private static function __stageMouseDown(e:Event) : void { }
            private static function __removeFromStage(event:Event) : void { }
            public static function __upDrag(event:MouseEvent) : void { }
            private static function __stopDrag(evt:MouseEvent) : void { }
            public static function acceptDrag(target:IAcceptDrag, action:String = null) : void { }
   }}