package road7th.comm{   import flash.events.ErrorEvent;   import flash.events.Event;   import flash.events.EventDispatcher;   import flash.events.ProgressEvent;   import flash.net.Socket;   import flash.utils.ByteArray;      [Event(name="connect",type="flash.events.Event")]   [Event(name="close",type="flash.events.Event")]   [Event(name="error",type="flash.events.ErrorEvent")]   [Event(name="data",type="road7th.comm.SocketEvent")]   public class ByteSocket extends EventDispatcher   {            private static var KEY:Array = [174,191,86,120,171,205,239,241];            public static var RECEIVE_KEY:ByteArray;            public static var SEND_KEY:ByteArray;                   private var _debug:Boolean;            private var _socket:Socket;            private var _ip:String;            private var _port:Number;            private var _send_fsm:FSM;            private var _receive_fsm:FSM;            private var _encrypted:Boolean;            private var _readBuffer:ByteArray;            private var _readOffset:int;            private var _writeOffset:int;            private var _headerTemp:ByteArray;            private var pkgNumber:int = 0;            public function ByteSocket(encrypted:Boolean = true, debug:Boolean = false) { super(); }            public function setKey(key:Array) : void { }            public function resetKey() : void { }            public function setFsm(adder:int, muliter:int) : void { }            public function connect(ip:String, port:Number) : void { }            private function addEvent(socket:Socket) : void { }            private function removeEvent(socket:Socket) : void { }            public function get connected() : Boolean { return false; }            public function isSame(ip:String, port:int) : Boolean { return false; }            public function send(pkg:PackageOut) : void { }            public function sendString(data:String) : void { }            public function close() : void { }            private function handleConnect(event:Event) : void { }            private function handleClose(event:Event) : void { }            private function handleIoError(event:ErrorEvent) : void { }            private function handleIncoming(event:ProgressEvent) : void { }            private function readPackage() : void { }            private function copyByteArray(src:ByteArray) : ByteArray { return null; }            public function decrptBytes(src:ByteArray, len:int, key:ByteArray) : ByteArray { return null; }            private function tracePkg(src:ByteArray, des:String, len:int = -1) : void { }            private function traceArr(arr:ByteArray) : void { }            private function handlePackage(pkg:PackageIn) : void { }            public function dispose() : void { }   }}class FSM{          private var _state:int;      private var _adder:int;      private var _multiper:int;      function FSM(adder:int, multiper:int) { super(); }      public function getState() : int { return 0; }      public function reset() : void { }      public function setup(adder:int, multiper:int) : void { }      public function updateState() : int { return 0; }}